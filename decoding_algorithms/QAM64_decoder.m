function out = QAM64_decoder(in,amplifier)
    out = zeros(6*length(in),1);
    if amplifier
        data = in*sqrt(28);
    else
        data = in;
    end
    %first quantized the input
    lut = [ -7+ 1i*-7,-7+ 1i*-5,-7+ 1i*-1,-7+ 1i*-3,-7+ 1i*7,-7+ 1i*5,-7+ 1i*1,-7+ 1i*3, ...
            -5+ 1i*-7,-5+ 1i*-5,-5+ 1i*-1,-5+ 1i*-3,-5+ 1i*7,-5+ 1i*5,-5+ 1i*1,-5+ 1i*3, ...
            -1+ 1i*-7,-1+ 1i*-5,-1+ 1i*-1,-1+ 1i*-3,-1+ 1i*7,-1+ 1i*5,-1+ 1i*1,-1+ 1i*3, ...
            -3+ 1i*-7,-3+ 1i*-5,-3+ 1i*-1,-3+ 1i*-3,-3+ 1i*7,-3+ 1i*5,-3+ 1i*1,-3+ 1i*3, ...
            7+ 1i*-7,7+ 1i*-5,7+ 1i*-1,7+ 1i*-3,7+ 1i*7,7+ 1i*5,7+ 1i*1,7+ 1i*3, ...
            5+ 1i*-7,5+ 1i*-5,5+ 1i*-1,5+ 1i*-3,5+ 1i*7,5+ 1i*5,5+ 1i*1,5+ 1i*3, ...
            1+ 1i*-7,1+ 1i*-5,1+ 1i*-1,1+ 1i*-3,1+ 1i*7,1+ 1i*5,1+ 1i*1,1+ 1i*3, ...
            3+ 1i*-7,3+ 1i*-5,3+ 1i*-1,3+ 1i*-3,3+ 1i*7,3+ 1i*5,3+ 1i*1,3+ 1i*3, ...
            ];
    bin_lut = [ [0 0 0 0 0 0]; [0 0 0 0 0 1]; [0 0 0 0 1 0]; [0 0 0 0 1 1]; [0 0 0 1 0 0]; [0 0 0 1 0 1]; [0 0 0 1 1 0]; [0 0 0 1 1 1];  ...
            [0 0 1 0 0 0]; [0 0 1 0 0 1]; [0 0 1 0 1 0]; [0 0 1 0 1 1]; [0 0 1 1 0 0]; [0 0 1 1 0 1]; [0 0 1 1 1 0]; [0 0 1 1 1 1];  ...
            [0 1 0 0 0 0]; [0 1 0 0 0 1]; [0 1 0 0 1 0]; [0 1 0 0 1 1]; [0 1 0 1 0 0]; [0 1 0 1 0 1]; [0 1 0 1 1 0]; [0 1 0 1 1 1];  ...
            [0 1 1 0 0 0]; [0 1 1 0 0 1]; [0 1 1 0 1 0]; [0 1 1 0 1 1]; [0 1 1 1 0 0]; [0 1 1 1 0 1]; [0 1 1 1 1 0]; [0 1 1 1 1 1];  ...
            [1 0 0 0 0 0]; [1 0 0 0 0 1]; [1 0 0 0 1 0]; [1 0 0 0 1 1]; [1 0 0 1 0 0]; [1 0 0 1 0 1]; [1 0 0 1 1 0]; [1 0 0 1 1 1];  ...
            [1 0 1 0 0 0]; [1 0 1 0 0 1]; [1 0 1 0 1 0]; [1 0 1 0 1 1]; [1 0 1 1 0 0]; [1 0 1 1 0 1]; [1 0 1 1 1 0]; [1 0 1 1 1 1];  ...
            [1 1 0 0 0 0]; [1 1 0 0 0 1]; [1 1 0 0 1 0]; [1 1 0 0 1 1]; [1 1 0 1 0 0]; [1 1 0 1 0 1]; [1 1 0 1 1 0]; [1 1 0 1 1 1];  ...
            [1 1 1 0 0 0]; [1 1 1 0 0 1]; [1 1 1 0 1 0]; [1 1 1 0 1 1]; [1 1 1 1 0 0]; [1 1 1 1 0 1]; [1 1 1 1 1 0]; [1 1 1 1 1 1];  ...
            ];
    for i = 1:length(data)
        distance = lut - data(i);
        out(6*(i-1)+1:6*i) = [bin_lut(distance == min(distance),:)]';
    end
end
